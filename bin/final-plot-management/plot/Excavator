#!/usr/bin/env bash
#set -x
## Description: Excavator - This script is not to be ran directly (but it can), and is called by 'Foreman'. This script analyzes the chia plot directories, and determines the best drive to move the plot to from the -d buffer drive.

CheckDeps() {
    if ! command -v ProofOfSpace &> /dev/null; then
        echo "ERROR: Missing ProofOfSpace"
        echo "Get it - https://github.com/Chia-Network/chiapos"
        exit 1
    fi
    if ! command -v yq &> /dev/null; then
        echo "ERROR: Missing yq"
        echo "Get it with: go install github.com/mikefarah/yq/v4@latest"
        exit 1
    fi
}

CHIA_ROOT=$HOME/chia-blockchain
# Example: CHIA_ROOT=$HOME/chia-blockchain

CheckPath() {
    if [[ -z $CHIA_ROOT ]]; then
        echo "ERROR: CHIA_ROOT is unset."
        echo "Edit $0, and set the value of line #4 to the path of your chia-blockchain repo."
        exit 1
    fi
}

# This is configured to work with the particular setup of my system.
# For this to work for you, please read through this and make adjustments as needed.
# For my system, this works assuming the mountpoint for your drives are structred as:
#
#   mnt
#   ├── plots
#   │   ├── pool
#   │   │   └── plot-<NFT_PLOT>.plot
#   │   └── solo
#   │       └── plot-<OG_PLOT>.plot
#   └── plots2
#       ├── pool
#       │   └── plot-<NFT_PLOT>.plot
#       └── solo
#           └── plot-<OG_PLOT>.plot
#

PLOTARG=$1
CheckInteractive() {
    if [[ -z $WENDY_INODE ]]; then
        if [[ -z $PLOTARG ]]; then
            echo "To run this manually, execute as:"
            echo "Excavator <NFT_PLOT>"
            exit 1
        else
            WENDY_INODE=$(realpath "$PLOTARG")
        fi
    fi
}

MOUNT_LIST="/tmp/$(basename "$0")-mounts.$$.list"
FindMounts() {
    echo "Finding plot locations..."
    "$CHIA_ROOT"/venv/bin/chia plots show | \
        grep 'solo\|pool' | \
#        sed 's,/*[^/]\+/*$,,' | \
        sort -R >"$MOUNT_LIST"
}

#FindDupes() {
#    echo "Finding presence of existing plots..."
#    PLOTNAME=$(basename "$WENDY_INODE")
#       PLOTPATH=$(dirname "$WENDY_INODE")
#    PLOTDUPE=$(find /mnt/* -type f -name '*'$PLOTNAME'*' ! -path $PLOTPATH/'*')
#    DUPEPATH=$(dirname "$PLOTDUPE")
#    if find /mnt/* -type f -name '*'$PLOTNAME'*' | grep -q .; then
#        if ${ProofOfSpace check -f $PLOTDUPE 1 &>/dev/null}; then
#            echo "Plot $PLOTNAME already exists at $DUPEPATH, and is valid"
#            echo "Consider deleting $WENDY_INODE"
#            rm "$MOUNT_LIST"
#            exit 1
#        else
#            echo "Plot $PLOTNAME already exists at $DUPEPATH, but does not appear to be valid"
#            echo "Plot transfer may already be in progress, or incomplete plot may need to be removed"
#            rm "$MOUNT_LIST"
#            exit 1
#        fi
#    fi
#}

FindBusy() {
    echo "Finding busy volumes..."
    BUSY_LIST="/tmp/$(basename "$0")-busy.$$.list"
    pgrep -fa "^rsync" | \
        grep 'plot' | \
        grep 'pool/\|solo/' | \
        sed -e 's/^.* //;s/.$//' | \
        sort | \
        uniq > "$BUSY_LIST"
}

RemoveBusy() {
    echo "Excluding busy volumes..."
    if [[ -s "$BUSY_LIST" ]]; then
        while read -r BUSY; do
        ESC_BUSY="$(dirname $(printf '%s\n' "$BUSY") | sed -e 's/[\/&]/\\&/g')"
        sed -i "/^$ESC_BUSY\b/Id" "$MOUNT_LIST"
        done <"$BUSY_LIST"
    fi
}

CheckMounts() {
    n=0
    until [ "$n" -ge 5 ]; do
        FindBusy
        RemoveBusy
        [ -s "$MOUNT_LIST" ] && break
        n=$((n+1))
        echo "No available mounts. Checking again in 5 minutes..."
        sleep 5m
    done
    if [[ $n -eq 6 ]]; then
        echo "Could not find an available mount. Giving up"
        rm "$MOUNT_LIST"
        rm "$BUSY_LIST"
        exit 1
    fi
}

IterateMounts() {
    m=0
    until [ "$m" -ge 5 ]; do
        while read -r TARGET; do
            PLOTNAME=$(basename "$WENDY_INODE")
            PLOTSIZE=$(stat --printf='%s' "$WENDY_INODE")
            AVAIL=$(df -H --output=avail --block-size=1 "$TARGET" | tail -n 1 | xargs)
            PLOTCOUNT="$((AVAIL / PLOTSIZE))"
            echo "Evaluating mount..."
            if [[ $PLOTCOUNT -gt 0 ]]; then
                echo "Moving $WENDY_INODE to $TARGET/..."
                rsync -a --remove-source-files "$WENDY_INODE" "$TARGET"/"$PLOTNAME"
                if [[ -f "$TARGET"/"$PLOTNAME" ]]; then
                    echo "$PLOTNAME has been moved to $TARGET/, and is ready for farming!"
                    exit 0
                fi
                break 2
            fi
        done < "$MOUNT_LIST"
        m=$((m+1))
        echo "No available mounts. Checking again in 5 minutes..."
        sleep 5m
    done
    if [[ $m -eq 6 ]]; then
        echo "Could not find an available mount. Giving up."
        rm "$MOUNT_LIST"
        rm "$BUSY_LIST"
        exit 1
    fi
}

CheckDeps
CheckPath
CheckInteractive
FindMounts
#FindDupes
CheckMounts
IterateMounts

rm "$MOUNT_LIST"
rm "$BUSY_LIST"
